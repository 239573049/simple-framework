// <auto-generated />
using System;
using EntityFrameworkCore.DbMigrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameworkCore.DbMigrations.Migrations
{
    [DbContext(typeof(EfCoreMigrationDbContext))]
    [Migration("20221027170508_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Simple.Auth.Domain.Menus.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Component")
                        .HasColumnType("longtext")
                        .HasComment("前端对应组件");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext")
                        .HasComment("图标");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasComment("顺序");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasComment("上级id 为null表示当前为顶层");

                    b.Property<string>("Path")
                        .HasColumnType("longtext")
                        .HasComment("前端跳转路由");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasComment("菜单显示标题");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Menus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a96082-0bb3-4bad-ae87-3573f24e599e"),
                            Component = "@/pages/home/index",
                            ConcurrencyStamp = "598d073a580e4c74ae1d9f3d65c17bf3",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            Icon = "HomeOutlined",
                            Index = 0,
                            IsDeleted = false,
                            Path = "/home",
                            Title = "首页"
                        },
                        new
                        {
                            Id = new Guid("2885593e-298b-4bd9-8efc-08740ee0adb0"),
                            Component = "@/pages/user-admin/index",
                            ConcurrencyStamp = "b01dab58767945a3916233780bd017ff",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            Icon = "",
                            Index = 1,
                            IsDeleted = false,
                            Path = "/user-admin",
                            Title = "用户管理"
                        });
                });

            modelBuilder.Entity("Simple.Auth.Domain.Roles.MenuRoleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)")
                        .HasComment("菜单Id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasComment("角色Id");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("MenuRoleFunctions", (string)null);

                    b.HasComment("菜单角色配置");
                });

            modelBuilder.Entity("Simple.Auth.Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext")
                        .HasComment("编号");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasComment("顺序");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否私有 私有无法删除");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasComment("角色名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasComment("角色");
                });

            modelBuilder.Entity("Simple.Auth.Domain.Roles.UserRoleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasComment("角色Id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户id");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("UserRoleFunctions", (string)null);

                    b.HasComment("用户角色配置");
                });

            modelBuilder.Entity("Simple.Admin.Domain.Systems.DictionarySetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Key");

                    b.ToTable("DictionarySettings", (string)null);
                });

            modelBuilder.Entity("Simple.Admin.Domain.Users.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PassWord")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("UserInfos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b64d9277-2716-4dc9-9c66-18311c3363ca"),
                            Avatar = "",
                            ConcurrencyStamp = "7fc7ae11ee3d44f7a4e5b7b17c453457",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            IsDeleted = false,
                            Name = "admin",
                            PassWord = "admin",
                            Status = 0,
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
