// <auto-generated />
using System;
using EntityFrameworkCore.DbMigrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameworkCore.DbMigrations.Migrations
{
    [DbContext(typeof(EfCoreMigrationDbContext))]
    [Migration("20221028172918_addData")]
    partial class addData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Simple.Admin.Domain.Systems.DictionarySetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Key");

                    b.ToTable("DictionarySettings", (string)null);
                });

            modelBuilder.Entity("Simple.Admin.Domain.Users.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PassWord")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("UserInfos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef4c4a34-f531-46e2-985d-04f8f2915f79"),
                            Avatar = "",
                            ConcurrencyStamp = "3372412b3ca3477fa6596e576fc37c47",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            IsDeleted = false,
                            Name = "admin",
                            PassWord = "admin",
                            Status = 0,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Simple.Auth.Domain.Menus.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Component")
                        .HasColumnType("longtext")
                        .HasComment("前端对应组件");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext")
                        .HasComment("图标");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasComment("顺序");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasComment("上级id 为null表示当前为顶层");

                    b.Property<string>("Path")
                        .HasColumnType("longtext")
                        .HasComment("前端跳转路由");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasComment("菜单显示标题");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Menus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b37c4c37-8b27-4935-a89d-78c2cf6252dd"),
                            Component = "@/pages/admin/home",
                            ConcurrencyStamp = "3d07abde59964c2fa072e23fb596aab0",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            Icon = "HomeOutlined",
                            Index = 0,
                            IsDeleted = false,
                            Path = "/",
                            Title = "首页"
                        },
                        new
                        {
                            Id = new Guid("dd20c59b-ec18-4e89-b70e-39cd995f8f18"),
                            Component = "@/pages/admin/menu",
                            ConcurrencyStamp = "8a18de374f2d4904b093883982386241",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            Icon = "",
                            Index = 1,
                            IsDeleted = false,
                            Path = "/menu",
                            Title = "菜单管理"
                        },
                        new
                        {
                            Id = new Guid("7f0eab34-78b7-47d0-9596-9de9d3e38510"),
                            Component = "@/pages/admin/dictionary-settings",
                            ConcurrencyStamp = "78bde32630cd4c6eac6775a8bdc0fe35",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            Icon = "",
                            Index = 1,
                            IsDeleted = false,
                            Path = "/dictionary-settings",
                            Title = "字典设置"
                        },
                        new
                        {
                            Id = new Guid("c7742972-6851-4bbc-ad35-ada1f39d2077"),
                            Component = "@/pages/admin/user",
                            ConcurrencyStamp = "6c559b82b1ea48418c400951db091093",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraProperties = "{}",
                            Icon = "",
                            Index = 1,
                            IsDeleted = false,
                            Path = "/user",
                            Title = "用户管理"
                        });
                });

            modelBuilder.Entity("Simple.Auth.Domain.Roles.MenuRoleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)")
                        .HasComment("菜单Id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasComment("角色Id");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("MenuRoleFunctions", (string)null);

                    b.HasComment("菜单角色配置");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ea91342-524e-4fd6-99bc-005b8dcf30c9"),
                            MenuId = new Guid("b37c4c37-8b27-4935-a89d-78c2cf6252dd"),
                            RoleId = new Guid("0d0c305d-fdfb-435b-a65a-868ffb74d6e5")
                        },
                        new
                        {
                            Id = new Guid("61a8b6ee-00b4-417e-b2ce-2ead942872e9"),
                            MenuId = new Guid("dd20c59b-ec18-4e89-b70e-39cd995f8f18"),
                            RoleId = new Guid("0d0c305d-fdfb-435b-a65a-868ffb74d6e5")
                        },
                        new
                        {
                            Id = new Guid("91dab773-31bc-4d9a-a028-16a5562bc69b"),
                            MenuId = new Guid("7f0eab34-78b7-47d0-9596-9de9d3e38510"),
                            RoleId = new Guid("0d0c305d-fdfb-435b-a65a-868ffb74d6e5")
                        },
                        new
                        {
                            Id = new Guid("7a3040ee-6105-470a-802f-d2bcb6596a5d"),
                            MenuId = new Guid("c7742972-6851-4bbc-ad35-ada1f39d2077"),
                            RoleId = new Guid("0d0c305d-fdfb-435b-a65a-868ffb74d6e5")
                        });
                });

            modelBuilder.Entity("Simple.Auth.Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext")
                        .HasComment("编号");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasComment("顺序");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否私有 私有无法删除");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasComment("角色名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasComment("角色");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d0c305d-fdfb-435b-a65a-868ffb74d6e5"),
                            Code = "admin",
                            ConcurrencyStamp = "e04ba189ed804c008d5c2bea8ce56a04",
                            CreationTime = new DateTime(2022, 10, 29, 1, 29, 17, 597, DateTimeKind.Local).AddTicks(9189),
                            ExtraProperties = "{}",
                            Index = 1,
                            IsDeleted = false,
                            IsPrivate = true,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Simple.Auth.Domain.Roles.UserRoleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasComment("角色Id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户id");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("UserRoleFunctions", (string)null);

                    b.HasComment("用户角色配置");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84faf69a-b8dc-4f86-9655-4b34ade3cd73"),
                            RoleId = new Guid("0d0c305d-fdfb-435b-a65a-868ffb74d6e5"),
                            UserId = new Guid("ef4c4a34-f531-46e2-985d-04f8f2915f79")
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
